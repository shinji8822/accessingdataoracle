package com.example.accessingdataoracle.accessingdataoracle;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String add (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    userRepository.addNewUser(name,email);
    return "Saved\n";
  }

  @PostMapping(path="/update") // Map ONLY POST Requests
  public @ResponseBody String updateUserName (@RequestParam Integer id
      , @RequestParam(required = false) String name, @RequestParam(required = false) String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    userRepository.updateUserName(id,name,email);
    return "Updated\n";
  }

  @PostMapping(path="/delete") // Map ONLY POST Requests
  public @ResponseBody String delete (@RequestParam Integer id
      ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    userRepository.deleteById(id);
    return "Deleted\n";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<UserData> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path="/findById/{id}")
  public @ResponseBody Iterable<UserData> findUsers(@PathVariable("id") int id) {
    // This returns a JSON or XML with the users
    return userRepository.findById(id);
  }

}